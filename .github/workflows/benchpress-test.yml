name: Post-deployment BenchPress validation

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'Target resource group name'
        required: true
        default: 'rg-test'
        type: string
      location:
        description: 'Azure region'
        required: true
        default: 'West Europe'
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZ_TENANT_ID: ${{ vars.AZ_TENANT_ID }}
  AZ_SUBSCRIPTION_ID: ${{ vars.AZ_SUBSCRIPTION_ID }}
  AZ_APPLICATION_ID: ${{ vars.AZ_APPLICATION_ID }}
  AZ_ENCRYPTED_PASSWORD: ${{ secrets.AZ_ENCRYPTED_PASSWORD }}

jobs:
  validate-pester:
    runs-on: ubuntu-latest
    name: Validate infrastructure with BenchPress
    steps:
      - uses: actions/checkout@v3
        name: Checkout Repo
        id: checkout
        with:
          fetch-depth: 0

#      - uses: azure/login@v1
#        name: Sign in to Azure
#        id: login
#        with:
#          client-id: ${{ env.ARM_CLIENT_ID }}
#          tenant-id: ${{ env.ARM_TENANT_ID }}
#          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
#          enable-AzPSSession: true

      - name: BenchPress tests
        id: pester
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Set-PSRepository psgallery -InstallationPolicy trusted
            Install-Module -Name Pester -RequiredVersion 5.5.0 -Confirm:$false -Force -SkipPublisherCheck
            Install-Module -Name BenchPress.Azure -RequiredVersion 0.1 -Confirm:$false -Force -SkipPublisherCheck
            Import-Module Pester -Force
            $configuration = [PesterConfiguration]::Default
            $configuration.TestResult.Enabled = $true
            $configuration.Output.Verbosity = 'Detailed'
            $configuration.TestResult.OutputFormat = 'NUnitXml'
            $configuration.TestResult.OutputPath = 'Test.xml'
            $configuration.Output.CIFormat = 'GithubActions'
            $container = New-PesterContainer -Path "./infrastructure/resourceGroup/resourceGroup.Tests.ps1" -Data @{ ResourceGroupName = "${{ env.RESOURCE_GROUP }}"; location = "${{ env.LOCATION }}" }
            $configuration.Run.Container = $container
            $configuration.Run.PassThru = $true
            $result = Invoke-Pester -Configuration $configuration
            exit $result.FailedCount
          azPSVersion: "latest"
        env:
          RESOURCE_GROUP: ${{ inputs.resourceGroupName }}
          LOCATION: ${{ inputs.location }}
